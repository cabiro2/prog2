1. Sistema de Gerenciamento de Alunos 



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    int matricula;
    char nome[50];
    char curso[30];
    int idade;
} Aluno;

void limparBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF) {}
}

Aluno lerAluno() {
    Aluno aluno;
    printf("Digite a matrícula: ");
    scanf("%d", &aluno.matricula);
    limparBuffer();

    printf("Digite o nome: ");
    fgets(aluno.nome, sizeof(aluno.nome), stdin);
    aluno.nome[strcspn(aluno.nome, "\n")] = 0;

    printf("Digite o curso: ");
    fgets(aluno.curso, sizeof(aluno.curso), stdin);
    aluno.curso[strcspn(aluno.curso, "\n")] = 0;

    printf("Digite a idade: ");
    scanf("%d", &aluno.idade);
    limparBuffer();

    return aluno;
}

void incluirAluno() {
    FILE *arquivo = fopen("alunos.txt", "a");
    if (!arquivo) {
        printf("Erro ao abrir arquivo!\n");
        return;
    }
    
    Aluno aluno = lerAluno();
    fprintf(arquivo, "%d,%s,%s,%d\n", aluno.matricula, aluno.nome, aluno.curso, aluno.idade);
    fclose(arquivo);
    printf("Aluno incluído com sucesso!\n");
}

void alterarAluno() {
    FILE *arquivo = fopen("alunos.txt", "r");
    FILE *temp = fopen("temp.txt", "w");
    if (!arquivo || !temp) {
        printf("Erro ao abrir arquivo!\n");
        return;
    }

    int matricula, encontrado = 0, opcao;
    char linha[256];
    Aluno aluno;

    printf("Digite a matrícula do aluno a ser alterado: ");
    scanf("%d", &matricula);
    limparBuffer();

    while (fgets(linha, sizeof(linha), arquivo)) {
        aluno.matricula = atoi(strtok(linha, ","));
        strcpy(aluno.nome, strtok(NULL, ","));
        strcpy(aluno.curso, strtok(NULL, ","));
        aluno.idade = atoi(strtok(NULL, ","));

        if (aluno.matricula == matricula) {
            encontrado = 1;
            printf("O que deseja alterar?\n1. Nome\n2. Curso\n3. Idade\nEscolha uma opção: ");
            scanf("%d", &opcao);
            limparBuffer();

            switch (opcao) {
                case 1:
                    printf("Digite o novo nome: ");
                    fgets(aluno.nome, sizeof(aluno.nome), stdin);
                    aluno.nome[strcspn(aluno.nome, "\n")] = 0;
                    break;
                case 2:
                    printf("Digite o novo curso: ");
                    fgets(aluno.curso, sizeof(aluno.curso), stdin);
                    aluno.curso[strcspn(aluno.curso, "\n")] = 0;
                    break;
                case 3:
                    printf("Digite a nova idade: ");
                    scanf("%d", &aluno.idade);
                    limparBuffer();
                    break;
                default:
                    printf("Opção inválida!\n");
            }
        }
        fprintf(temp, "%d,%s,%s,%d\n", aluno.matricula, aluno.nome, aluno.curso, aluno.idade);
    }

    fclose(arquivo);
    fclose(temp);

    if (encontrado) {
        remove("alunos.txt");
        rename("temp.txt", "alunos.txt");
        printf("Dados alterados com sucesso!\n");
    } else {
        remove("temp.txt");
        printf("Aluno não encontrado!\n");
    }
}

void excluirAluno() {
    FILE *arquivo = fopen("alunos.txt", "r");
    FILE *temp = fopen("temp.txt", "w");
    if (!arquivo || !temp) {
        printf("Erro ao abrir arquivo!\n");
        return;
    }

    int matricula, encontrado = 0;
    char linha[256];

    printf("Digite a matrícula do aluno a ser excluído: ");
    scanf("%d", &matricula);
    limparBuffer();

    while (fgets(linha, sizeof(linha), arquivo)) {
        int matriculaAtual = atoi(strtok(linha, ","));
        if (matriculaAtual != matricula) {
            fputs(linha, temp);
        } else {
            encontrado = 1;
        }
    }

    fclose(arquivo);
    fclose(temp);

    if (encontrado) {
        remove("alunos.txt");
        rename("temp.txt", "alunos.txt");
        printf("Aluno excluído com sucesso!\n");
    } else {
        remove("temp.txt");
        printf("Aluno não encontrado!\n");
    }
}

void consultarAluno() {
    FILE *arquivo = fopen("alunos.txt", "r");
    if (!arquivo) {
        printf("Erro ao abrir arquivo!\n");
        return;
    }

    int matricula, encontrado = 0;
    char linha[256];

    printf("Digite a matrícula do aluno: ");
    scanf("%d", &matricula);
    limparBuffer();

    while (fgets(linha, sizeof(linha), arquivo)) {
        int matriculaAtual = atoi(strtok(linha, ","));
        if (matriculaAtual == matricula) {
            printf("\nInformações do Aluno:\n");
            printf("Matrícula: %d\n", matriculaAtual);
            printf("Nome: %s\n", strtok(NULL, ","));
            printf("Curso: %s\n", strtok(NULL, ","));
            printf("Idade: %d\n", atoi(strtok(NULL, ",")));
            encontrado = 1;
            break;
        }
    }

    if (!encontrado) {
        printf("Aluno não encontrado!\n");
    }

    fclose(arquivo);
}

void listarAlunos() {
    FILE *arquivo = fopen("alunos.txt", "r");
    if (!arquivo) {
        printf("Erro ao abrir arquivo!\n");
        return;
    }

    char linha[256];
    printf("\nLista de Alunos:\n");
    printf("Matrícula | Nome | Curso | Idade\n");
    printf("-----------------------------------\n");

    while (fgets(linha, sizeof(linha), arquivo)) {
        int matricula = atoi(strtok(linha, ","));
        char *nome = strtok(NULL, ",");
        char *curso = strtok(NULL, ",");
        int idade = atoi(strtok(NULL, ","));
        printf("%d | %s | %s | %d\n", matricula, nome, curso, idade);
    }

    fclose(arquivo);
}

int main() {
    int opcao;

    do {
        printf("\n=== Sistema de Gerenciamento de Alunos ===\n");
        printf("1. Incluir aluno\n");
        printf("2. Alterar dados do aluno\n");
        printf("3. Excluir aluno\n");
        printf("4. Consultar aluno\n");
        printf("5. Listar alunos\n");
        printf("0. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        limparBuffer();

        switch (opcao) {
            case 1:
                incluirAluno();
                break;
            case 2:
                alterarAluno();
                break;
            case 3:
                excluirAluno();
                break;
            case 4:
                consultarAluno();
                break;
            case 5:
                listarAlunos();
                break;
            case 0:
                printf("Encerrando o programa...\n");
                break;
            default:
                printf("Opção inválida!\n");
        }
    } while (opcao != 0);

    return 0;
}




2. Cadastro de Funcionários


